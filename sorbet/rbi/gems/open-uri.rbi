# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/open-uri/all/open-uri.rbi
#
# open-uri-0.2.0

module URI
  def self.open(name, *rest, &block); end
end
module OpenURI
  def self.check_options(options); end
  def self.open_http(buf, target, proxy, options); end
  def self.open_loop(uri, options); end
  def self.open_uri(name, *rest); end
  def self.redirectable?(uri1, uri2); end
  def self.scan_open_optional_arguments(*rest); end
end
class OpenURI::HTTPError < StandardError
  def initialize(message, io); end
  def io; end
end
class OpenURI::HTTPRedirect < OpenURI::HTTPError
  def initialize(message, io, uri); end
  def uri; end
end
class OpenURI::Buffer
  def <<(str); end
  def initialize; end
  def io; end
  def size; end
end
module OpenURI::Meta
  def base_uri; end
  def base_uri=(arg0); end
  def charset; end
  def content_encoding; end
  def content_type; end
  def content_type_parse; end
  def last_modified; end
  def meta; end
  def meta_add_field(name, value); end
  def meta_add_field2(name, values); end
  def meta_setup_encoding; end
  def metas; end
  def self.init(obj, src = nil); end
  def status; end
  def status=(arg0); end
end
module OpenURI::OpenRead
  def open(*rest, &block); end
  def read(options = nil); end
end
class URI::HTTP < URI::Generic
  def buffer_open(buf, proxy, options); end
  include OpenURI::OpenRead
end
class URI::FTP < URI::Generic
  def buffer_open(buf, proxy, options); end
  include OpenURI::OpenRead
end
