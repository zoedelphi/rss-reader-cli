# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/uri/all/uri.rbi
#
# uri-0.11.0

module URI
  def self.decode_www_form(str, enc = nil, separator: nil, use__charset_: nil, isindex: nil); end
  def self.decode_www_form_component(str, enc = nil); end
  def self.encode_www_form(enum, enc = nil); end
  def self.encode_www_form_component(str, enc = nil); end
  def self.extract(str, schemes = nil, &block); end
  def self.for(scheme, *arguments, default: nil); end
  def self.get_encoding(label); end
  def self.join(*str); end
  def self.parse(uri); end
  def self.regexp(schemes = nil); end
  def self.register_scheme(scheme, klass); end
  def self.scheme_list; end
  def self.split(uri); end
  include URI::RFC2396_REGEXP
end
module URI::RFC2396_REGEXP
end
module URI::RFC2396_REGEXP::PATTERN
end
class URI::RFC2396_Parser
  def convert_to_uri(uri); end
  def escape(str, unsafe = nil); end
  def extract(str, schemes = nil); end
  def initialize(opts = nil); end
  def initialize_pattern(opts = nil); end
  def initialize_regexp(pattern); end
  def inspect; end
  def join(*uris); end
  def make_regexp(schemes = nil); end
  def parse(uri); end
  def pattern; end
  def regexp; end
  def split(uri); end
  def unescape(str, escaped = nil); end
  include URI::RFC2396_REGEXP
end
class URI::RFC3986_Parser
  def convert_to_uri(uri); end
  def default_regexp; end
  def initialize; end
  def inspect; end
  def join(*uris); end
  def parse(uri); end
  def regexp; end
  def split(uri); end
end
module URI::Util
  def make_components_hash(klass, array_hash); end
  def self.make_components_hash(klass, array_hash); end
end
module URI::Schemes
end
class URI::Error < StandardError
end
class URI::InvalidURIError < URI::Error
end
class URI::InvalidComponentError < URI::Error
end
class URI::BadURIError < URI::Error
end
module Kernel
  def URI(uri); end
  def self.URI(uri); end
end
class URI::Generic
  def +(oth); end
  def -(oth); end
  def ==(oth); end
  def absolute; end
  def absolute?; end
  def check_host(v); end
  def check_opaque(v); end
  def check_password(v, user = nil); end
  def check_path(v); end
  def check_port(v); end
  def check_registry(v); end
  def check_scheme(v); end
  def check_user(v); end
  def check_userinfo(user, password = nil); end
  def coerce(oth); end
  def component; end
  def component_ary; end
  def default_port; end
  def eql?(oth); end
  def escape_userpass(v); end
  def find_proxy(env = nil); end
  def fragment; end
  def fragment=(v); end
  def hash; end
  def hierarchical?; end
  def host; end
  def host=(v); end
  def hostname; end
  def hostname=(v); end
  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = nil, arg_check = nil); end
  def inspect; end
  def merge!(oth); end
  def merge(oth); end
  def merge_path(base, rel); end
  def normalize!; end
  def normalize; end
  def opaque; end
  def opaque=(v); end
  def parser; end
  def password; end
  def password=(password); end
  def path; end
  def path=(v); end
  def port; end
  def port=(v); end
  def query; end
  def query=(v); end
  def registry; end
  def registry=(v); end
  def relative?; end
  def replace!(oth); end
  def route_from(oth); end
  def route_from0(oth); end
  def route_from_path(src, dst); end
  def route_to(oth); end
  def scheme; end
  def scheme=(v); end
  def select(*components); end
  def self.build(args); end
  def self.build2(args); end
  def self.component; end
  def self.default_port; end
  def self.use_proxy?(hostname, addr, port, no_proxy); end
  def self.use_registry; end
  def set_host(v); end
  def set_opaque(v); end
  def set_password(v); end
  def set_path(v); end
  def set_port(v); end
  def set_registry(v); end
  def set_scheme(v); end
  def set_user(v); end
  def set_userinfo(user, password = nil); end
  def split_path(path); end
  def split_userinfo(ui); end
  def to_s; end
  def user; end
  def user=(user); end
  def userinfo; end
  def userinfo=(userinfo); end
  include URI
end
class URI::File < URI::Generic
  def check_password(user); end
  def check_user(user); end
  def check_userinfo(user); end
  def self.build(args); end
  def set_host(v); end
  def set_password(v); end
  def set_port(v); end
  def set_user(v); end
  def set_userinfo(v); end
end
class URI::FTP < URI::Generic
  def check_typecode(v); end
  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = nil, arg_check = nil); end
  def merge(oth); end
  def path; end
  def self.build(args); end
  def self.new2(user, password, host, port, path, typecode = nil, arg_check = nil); end
  def set_path(v); end
  def set_typecode(v); end
  def to_s; end
  def typecode; end
  def typecode=(typecode); end
end
class URI::HTTP < URI::Generic
  def authority; end
  def origin; end
  def request_uri; end
  def self.build(args); end
end
class URI::HTTPS < URI::HTTP
end
class URI::LDAP < URI::Generic
  def attributes; end
  def attributes=(val); end
  def build_path_query; end
  def dn; end
  def dn=(val); end
  def extensions; end
  def extensions=(val); end
  def filter; end
  def filter=(val); end
  def hierarchical?; end
  def initialize(*arg); end
  def parse_dn; end
  def parse_query; end
  def scope; end
  def scope=(val); end
  def self.build(args); end
  def set_attributes(val); end
  def set_dn(val); end
  def set_extensions(val); end
  def set_filter(val); end
  def set_scope(val); end
end
class URI::LDAPS < URI::LDAP
end
class URI::MailTo < URI::Generic
  def check_headers(v); end
  def check_to(v); end
  def headers; end
  def headers=(v); end
  def initialize(*arg); end
  def self.build(args); end
  def set_headers(v); end
  def set_to(v); end
  def to; end
  def to=(v); end
  def to_mailtext; end
  def to_rfc822text; end
  def to_s; end
  include URI::RFC2396_REGEXP
end
class URI::WS < URI::Generic
  def request_uri; end
  def self.build(args); end
end
